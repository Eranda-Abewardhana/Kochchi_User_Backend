name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend image
        run: |
          docker build -t eranda24/kochchi_app_backend:${{ github.ref_name }} ./Kochchi_User_Backend
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push eranda24/kochchi_app_backend:${{ github.ref_name }}

      - name: Build and push frontend image
        run: |
          echo "✅ Creating .env.production for Next.js"
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" > ./kochchi-frontend/.env.production
          
          docker build -t eranda24/kochchi_app_frontend:${{ github.ref_name }} ./kochchi-frontend
          
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push eranda24/kochchi_app_frontend:${{ github.ref_name }}

      - name: Verify images were pushed
        run: |
          echo "🔍 Verifying images were pushed to Docker Hub..."
          docker pull eranda24/kochchi_app_backend:${{ github.ref_name }}
          docker pull eranda24/kochchi_app_frontend:${{ github.ref_name }}
          echo "✅ Images verified successfully!"

      - name: Deploy to Hostinger VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_IP }}
          username: ${{ secrets.HOSTINGER_USER }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          script: |
            set -e
            IMAGE_TAG="${{ github.ref_name }}"

            echo "🔧 Installing Docker if needed..."
            if ! command -v docker >/dev/null 2>&1; then
              apt update && apt install docker.io -y
              systemctl start docker && systemctl enable docker
            fi

            echo "🔧 Installing Docker Compose if needed..."
            if ! command -v docker-compose >/dev/null 2>&1; then
              curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi

            echo "🔄 Cloning or updating the repository..."
            if [ ! -d "/root/Kochchi_User_Backend" ]; then
              git clone https://github.com/Eranda-Abewardhana/Kochchi_User_Backend.git /root/Kochchi_User_Backend
            else
              cd /root/Kochchi_User_Backend
              git fetch origin
              git checkout main
              git pull origin main
            fi

            cd /root/Kochchi_User_Backend

            echo "📝 Creating root .env for docker-compose..."
            echo "IMAGE_TAG=${IMAGE_TAG}" > .env

            echo "📝 Creating backend config .env..."
            echo "IMAGE_TAG=${IMAGE_TAG}" > Kochchi_User_Backend/.env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> Kochchi_User_Backend/.env
            echo "ALGORITHM=HS256" >> Kochchi_User_Backend/.env
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=300" >> Kochchi_User_Backend/.env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> Kochchi_User_Backend/.env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> Kochchi_User_Backend/.env
            echo "SUPER_ADMIN_USERNAME=${{ secrets.SUPER_ADMIN_USERNAME }}" >> Kochchi_User_Backend/.env
            echo "SUPER_ADMIN_PASSWORD=${{ secrets.SUPER_ADMIN_PASSWORD }}" >> Kochchi_User_Backend/.env
            echo "MONGODB_URI=${{ secrets.MONGODB_ATLAS_URI }}" >> Kochchi_User_Backend/.env
            echo "BASE_URL=${{ secrets.BASE_URL }}" >> Kochchi_User_Backend/.env
            echo "PORT=${{ secrets.PORT }}" >> Kochchi_User_Backend/.env
            echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> Kochchi_User_Backend/.env
            echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> Kochchi_User_Backend/.env
            echo "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" >> Kochchi_User_Backend/.env
            echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> Kochchi_User_Backend/.env
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> Kochchi_User_Backend/.env
            echo "REQUIRED_COLLECTIONS=${{ secrets.REQUIRED_COLLECTIONS }}" >> Kochchi_User_Backend/.env
            echo "CLOUD_NAME=${{ secrets.CLOUD_NAME }}" >> Kochchi_User_Backend/.env
            echo "CLOUD_API_KEY=${{ secrets.CLOUD_API_KEY }}" >> Kochchi_User_Backend/.env
            echo "CLOUD_API_SECRET=${{ secrets.CLOUD_API_SECRET }}" >> Kochchi_User_Backend/.env
            echo "CANCEL_URL=${{ secrets.CANCEL_URL }}" >> Kochchi_User_Backend/.env
            echo "SUCCESS_URL=${{ secrets.SUCCESS_URL }}" >> Kochchi_User_Backend/.env

            echo "🔐 Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "🧹 Cleaning up existing containers and images..."
            docker-compose down || true
            docker image rm eranda24/kochchi_app_backend:$IMAGE_TAG || true
            docker image rm eranda24/kochchi_app_frontend:$IMAGE_TAG || true
            docker system prune -af || true

            echo "📦  Pulling latest images..."
            docker pull eranda24/kochchi_app_backend:$IMAGE_TAG
            docker pull eranda24/kochchi_app_frontend:$IMAGE_TAG

            # Stop nginx container if it exists (avoid nginx startup before certs are ready)
            echo "🛑 Stopping nginx container if running..."
            docker ps -q --filter "name=nginx" | grep -q . && docker stop nginx || echo "nginx not running."
            
            # Paths to SSL certs
            CERT1="/etc/letsencrypt/live/api.kochchibazaar.lk/fullchain.pem"
            CERT2="/etc/letsencrypt/live/kochchibazaar.lk/fullchain.pem"
            
            # Ensure certbot is installed
            if ! command -v certbot >/dev/null 2>&1; then
            echo "📥 Installing Certbot..."
            apt update && apt install certbot -y
            fi
            
            # Generate SSL certificate for backend domain if missing
            if [ ! -f "$CERT1" ]; then
            echo "🔧 Generating cert for api.kochchibazaar.lk..."
            certbot certonly --standalone -d api.kochchibazaar.lk --non-interactive --agree-tos -m premathilakacp@gmail.com
            else
            echo "✅ Cert for api.kochchibazaar.lk already exists."
            fi
            
            # Generate SSL certificate for frontend domain if missing
            if [ ! -f "$CERT2" ]; then
            echo "🔧 Generating cert for kochchibazaar.lk..."
            certbot certonly --standalone -d kochchibazaar.lk --non-interactive --agree-tos -m premathilakacp@gmail.com
            else
            echo "✅ Cert for kochchibazaar.lk already exists."
            fi
            

            docker start nginx || true

            echo "🔧 Creating certbot volume if not exists..."
            docker volume create certbot-etc || true

            echo "🚀 Starting containers..."
            docker-compose up -d backend frontend nginx certbot

            echo "✅ Deployment completed successfully."
